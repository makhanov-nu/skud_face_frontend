/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './app/routes/__root';
import { Route as AuthImport } from './app/routes/_auth';
import { Route as IndexImport } from './app/routes/index';
import { Route as AuthUsersAddSingleUserImport } from './app/routes/_auth/users/add-single-user';
import { Route as AuthUsersAddImport } from './app/routes/_auth/users/add';

// Create Virtual Routes

const AuthPointsIndexLazyImport = createFileRoute('/_auth/points/')();
const AuthOrganizationsIndexLazyImport = createFileRoute('/_auth/organizations/')();
const AuthAdminsIndexLazyImport = createFileRoute('/_auth/admins/')();
const AuthOrganizationsAddLazyImport = createFileRoute('/_auth/organizations/add')();
const AuthAdminsAddLazyImport = createFileRoute('/_auth/admins/add')();

// Create/Update Routes

const AuthRoute = AuthImport.update({
	id: '/_auth',
	getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
	path: '/',
	getParentRoute: () => rootRoute,
} as any);

const AuthPointsIndexLazyRoute = AuthPointsIndexLazyImport.update({
	path: '/points/',
	getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./app/routes/_auth/points/index.lazy').then((d) => d.Route));

const AuthOrganizationsIndexLazyRoute = AuthOrganizationsIndexLazyImport.update({
	path: '/organizations/',
	getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./app/routes/_auth/organizations/index.lazy').then((d) => d.Route));

const AuthAdminsIndexLazyRoute = AuthAdminsIndexLazyImport.update({
	path: '/admins/',
	getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./app/routes/_auth/admins/index.lazy').then((d) => d.Route));

const AuthOrganizationsAddLazyRoute = AuthOrganizationsAddLazyImport.update({
	path: '/organizations/add',
	getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./app/routes/_auth/organizations/add.lazy').then((d) => d.Route));

const AuthAdminsAddLazyRoute = AuthAdminsAddLazyImport.update({
	path: '/admins/add',
	getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./app/routes/_auth/admins/add.lazy').then((d) => d.Route));

const AuthUsersAddSingleUserRoute = AuthUsersAddSingleUserImport.update({
	path: '/users/add-single-user',
	getParentRoute: () => AuthRoute,
} as any);

const AuthUsersAddRoute = AuthUsersAddImport.update({
	path: '/users/add',
	getParentRoute: () => AuthRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
	interface FileRoutesByPath {
		'/': {
			id: '/';
			path: '/';
			fullPath: '/';
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		'/_auth': {
			id: '/_auth';
			path: '';
			fullPath: '';
			preLoaderRoute: typeof AuthImport;
			parentRoute: typeof rootRoute;
		};
		'/_auth/users/add': {
			id: '/_auth/users/add';
			path: '/users/add';
			fullPath: '/users/add';
			preLoaderRoute: typeof AuthUsersAddImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/users/add-single-user': {
			id: '/_auth/users/add-single-user';
			path: '/users/add-single-user';
			fullPath: '/users/add-single-user';
			preLoaderRoute: typeof AuthUsersAddSingleUserImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/admins/add': {
			id: '/_auth/admins/add';
			path: '/admins/add';
			fullPath: '/admins/add';
			preLoaderRoute: typeof AuthAdminsAddLazyImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/organizations/add': {
			id: '/_auth/organizations/add';
			path: '/organizations/add';
			fullPath: '/organizations/add';
			preLoaderRoute: typeof AuthOrganizationsAddLazyImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/admins/': {
			id: '/_auth/admins/';
			path: '/admins';
			fullPath: '/admins';
			preLoaderRoute: typeof AuthAdminsIndexLazyImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/organizations/': {
			id: '/_auth/organizations/';
			path: '/organizations';
			fullPath: '/organizations';
			preLoaderRoute: typeof AuthOrganizationsIndexLazyImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/points/': {
			id: '/_auth/points/';
			path: '/points';
			fullPath: '/points';
			preLoaderRoute: typeof AuthPointsIndexLazyImport;
			parentRoute: typeof AuthImport;
		};
	}
}

// Create and export the route tree

interface AuthRouteChildren {
	AuthUsersAddRoute: typeof AuthUsersAddRoute;
	AuthUsersAddSingleUserRoute: typeof AuthUsersAddSingleUserRoute;
	AuthAdminsAddLazyRoute: typeof AuthAdminsAddLazyRoute;
	AuthOrganizationsAddLazyRoute: typeof AuthOrganizationsAddLazyRoute;
	AuthAdminsIndexLazyRoute: typeof AuthAdminsIndexLazyRoute;
	AuthOrganizationsIndexLazyRoute: typeof AuthOrganizationsIndexLazyRoute;
	AuthPointsIndexLazyRoute: typeof AuthPointsIndexLazyRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
	AuthUsersAddRoute: AuthUsersAddRoute,
	AuthUsersAddSingleUserRoute: AuthUsersAddSingleUserRoute,
	AuthAdminsAddLazyRoute: AuthAdminsAddLazyRoute,
	AuthOrganizationsAddLazyRoute: AuthOrganizationsAddLazyRoute,
	AuthAdminsIndexLazyRoute: AuthAdminsIndexLazyRoute,
	AuthOrganizationsIndexLazyRoute: AuthOrganizationsIndexLazyRoute,
	AuthPointsIndexLazyRoute: AuthPointsIndexLazyRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
	'/': typeof IndexRoute;
	'': typeof AuthRouteWithChildren;
	'/users/add': typeof AuthUsersAddRoute;
	'/users/add-single-user': typeof AuthUsersAddSingleUserRoute;
	'/admins/add': typeof AuthAdminsAddLazyRoute;
	'/organizations/add': typeof AuthOrganizationsAddLazyRoute;
	'/admins': typeof AuthAdminsIndexLazyRoute;
	'/organizations': typeof AuthOrganizationsIndexLazyRoute;
	'/points': typeof AuthPointsIndexLazyRoute;
}

export interface FileRoutesByTo {
	'/': typeof IndexRoute;
	'': typeof AuthRouteWithChildren;
	'/users/add': typeof AuthUsersAddRoute;
	'/users/add-single-user': typeof AuthUsersAddSingleUserRoute;
	'/admins/add': typeof AuthAdminsAddLazyRoute;
	'/organizations/add': typeof AuthOrganizationsAddLazyRoute;
	'/admins': typeof AuthAdminsIndexLazyRoute;
	'/organizations': typeof AuthOrganizationsIndexLazyRoute;
	'/points': typeof AuthPointsIndexLazyRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	'/': typeof IndexRoute;
	'/_auth': typeof AuthRouteWithChildren;
	'/_auth/users/add': typeof AuthUsersAddRoute;
	'/_auth/users/add-single-user': typeof AuthUsersAddSingleUserRoute;
	'/_auth/admins/add': typeof AuthAdminsAddLazyRoute;
	'/_auth/organizations/add': typeof AuthOrganizationsAddLazyRoute;
	'/_auth/admins/': typeof AuthAdminsIndexLazyRoute;
	'/_auth/organizations/': typeof AuthOrganizationsIndexLazyRoute;
	'/_auth/points/': typeof AuthPointsIndexLazyRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths:
		| '/'
		| ''
		| '/users/add'
		| '/users/add-single-user'
		| '/admins/add'
		| '/organizations/add'
		| '/admins'
		| '/organizations'
		| '/points';
	fileRoutesByTo: FileRoutesByTo;
	to:
		| '/'
		| ''
		| '/users/add'
		| '/users/add-single-user'
		| '/admins/add'
		| '/organizations/add'
		| '/admins'
		| '/organizations'
		| '/points';
	id:
		| '__root__'
		| '/'
		| '/_auth'
		| '/_auth/users/add'
		| '/_auth/users/add-single-user'
		| '/_auth/admins/add'
		| '/_auth/organizations/add'
		| '/_auth/admins/'
		| '/_auth/organizations/'
		| '/_auth/points/';
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	AuthRoute: typeof AuthRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	AuthRoute: AuthRouteWithChildren,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/users/add",
        "/_auth/users/add-single-user",
        "/_auth/admins/add",
        "/_auth/organizations/add",
        "/_auth/admins/",
        "/_auth/organizations/",
        "/_auth/points/"
      ]
    },
    "/_auth/users/add": {
      "filePath": "_auth/users/add.ts",
      "parent": "/_auth"
    },
    "/_auth/users/add-single-user": {
      "filePath": "_auth/users/add-single-user.ts",
      "parent": "/_auth"
    },
    "/_auth/admins/add": {
      "filePath": "_auth/admins/add.lazy.ts",
      "parent": "/_auth"
    },
    "/_auth/organizations/add": {
      "filePath": "_auth/organizations/add.lazy.ts",
      "parent": "/_auth"
    },
    "/_auth/admins/": {
      "filePath": "_auth/admins/index.lazy.ts",
      "parent": "/_auth"
    },
    "/_auth/organizations/": {
      "filePath": "_auth/organizations/index.lazy.ts",
      "parent": "/_auth"
    },
    "/_auth/points/": {
      "filePath": "_auth/points/index.lazy.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
