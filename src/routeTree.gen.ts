/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './app/routes/__root';
import { Route as AuthImport } from './app/routes/_auth';
import { Route as IndexImport } from './app/routes/index';

// Create Virtual Routes

const AuthUsersLazyImport = createFileRoute('/_auth/users')();
const AuthOrganizationLazyImport = createFileRoute('/_auth/organization')();
const AuthAdminLazyImport = createFileRoute('/_auth/admin')();

// Create/Update Routes

const AuthRoute = AuthImport.update({
	id: '/_auth',
	getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
	path: '/',
	getParentRoute: () => rootRoute,
} as any);

const AuthUsersLazyRoute = AuthUsersLazyImport.update({
	path: '/users',
	getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./app/routes/_auth.users.lazy').then((d) => d.Route));

const AuthOrganizationLazyRoute = AuthOrganizationLazyImport.update({
	path: '/organization',
	getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./app/routes/_auth.organization.lazy').then((d) => d.Route));

const AuthAdminLazyRoute = AuthAdminLazyImport.update({
	path: '/admin',
	getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./app/routes/_auth.admin.lazy').then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
	interface FileRoutesByPath {
		'/': {
			id: '/';
			path: '/';
			fullPath: '/';
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		'/_auth': {
			id: '/_auth';
			path: '';
			fullPath: '';
			preLoaderRoute: typeof AuthImport;
			parentRoute: typeof rootRoute;
		};
		'/_auth/admin': {
			id: '/_auth/admin';
			path: '/admin';
			fullPath: '/admin';
			preLoaderRoute: typeof AuthAdminLazyImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/organization': {
			id: '/_auth/organization';
			path: '/organization';
			fullPath: '/organization';
			preLoaderRoute: typeof AuthOrganizationLazyImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/users': {
			id: '/_auth/users';
			path: '/users';
			fullPath: '/users';
			preLoaderRoute: typeof AuthUsersLazyImport;
			parentRoute: typeof AuthImport;
		};
	}
}

// Create and export the route tree

interface AuthRouteChildren {
	AuthAdminLazyRoute: typeof AuthAdminLazyRoute;
	AuthOrganizationLazyRoute: typeof AuthOrganizationLazyRoute;
	AuthUsersLazyRoute: typeof AuthUsersLazyRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
	AuthAdminLazyRoute: AuthAdminLazyRoute,
	AuthOrganizationLazyRoute: AuthOrganizationLazyRoute,
	AuthUsersLazyRoute: AuthUsersLazyRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
	'/': typeof IndexRoute;
	'': typeof AuthRouteWithChildren;
	'/admin': typeof AuthAdminLazyRoute;
	'/organization': typeof AuthOrganizationLazyRoute;
	'/users': typeof AuthUsersLazyRoute;
}

export interface FileRoutesByTo {
	'/': typeof IndexRoute;
	'': typeof AuthRouteWithChildren;
	'/admin': typeof AuthAdminLazyRoute;
	'/organization': typeof AuthOrganizationLazyRoute;
	'/users': typeof AuthUsersLazyRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	'/': typeof IndexRoute;
	'/_auth': typeof AuthRouteWithChildren;
	'/_auth/admin': typeof AuthAdminLazyRoute;
	'/_auth/organization': typeof AuthOrganizationLazyRoute;
	'/_auth/users': typeof AuthUsersLazyRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: '/' | '' | '/admin' | '/organization' | '/users';
	fileRoutesByTo: FileRoutesByTo;
	to: '/' | '' | '/admin' | '/organization' | '/users';
	id: '__root__' | '/' | '/_auth' | '/_auth/admin' | '/_auth/organization' | '/_auth/users';
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	AuthRoute: typeof AuthRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	AuthRoute: AuthRouteWithChildren,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/admin",
        "/_auth/organization",
        "/_auth/users"
      ]
    },
    "/_auth/admin": {
      "filePath": "_auth.admin.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/organization": {
      "filePath": "_auth.organization.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/users": {
      "filePath": "_auth.users.lazy.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
