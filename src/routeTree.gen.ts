/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './app/routes/__root';
import { Route as AuthImport } from './app/routes/_auth';
import { Route as IndexImport } from './app/routes/index';
import { Route as AuthUsersCreateSingleUserImport } from './app/routes/_auth/users/create-single-user';
import { Route as AuthUsersCreateImport } from './app/routes/_auth/users/create';

// Create Virtual Routes

const AuthOrganizationsIndexLazyImport = createFileRoute('/_auth/organizations/')();
const AuthOrganizationsCreateLazyImport = createFileRoute('/_auth/organizations/create')();
const AuthAdminsCreateLazyImport = createFileRoute('/_auth/admins/create')();

// Create/Update Routes

const AuthRoute = AuthImport.update({
	id: '/_auth',
	getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
	path: '/',
	getParentRoute: () => rootRoute,
} as any);

const AuthOrganizationsIndexLazyRoute = AuthOrganizationsIndexLazyImport.update({
	path: '/organizations/',
	getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./app/routes/_auth/organizations/index.lazy').then((d) => d.Route));

const AuthOrganizationsCreateLazyRoute = AuthOrganizationsCreateLazyImport.update({
	path: '/organizations/create',
	getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./app/routes/_auth/organizations/create.lazy').then((d) => d.Route));

const AuthAdminsCreateLazyRoute = AuthAdminsCreateLazyImport.update({
	path: '/admins/create',
	getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./app/routes/_auth/admins/create.lazy').then((d) => d.Route));

const AuthUsersCreateSingleUserRoute = AuthUsersCreateSingleUserImport.update({
	path: '/users/create-single-user',
	getParentRoute: () => AuthRoute,
} as any);

const AuthUsersCreateRoute = AuthUsersCreateImport.update({
	path: '/users/create',
	getParentRoute: () => AuthRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
	interface FileRoutesByPath {
		'/': {
			id: '/';
			path: '/';
			fullPath: '/';
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		'/_auth': {
			id: '/_auth';
			path: '';
			fullPath: '';
			preLoaderRoute: typeof AuthImport;
			parentRoute: typeof rootRoute;
		};
		'/_auth/users/create': {
			id: '/_auth/users/create';
			path: '/users/create';
			fullPath: '/users/create';
			preLoaderRoute: typeof AuthUsersCreateImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/users/create-single-user': {
			id: '/_auth/users/create-single-user';
			path: '/users/create-single-user';
			fullPath: '/users/create-single-user';
			preLoaderRoute: typeof AuthUsersCreateSingleUserImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/admins/create': {
			id: '/_auth/admins/create';
			path: '/admins/create';
			fullPath: '/admins/create';
			preLoaderRoute: typeof AuthAdminsCreateLazyImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/organizations/create': {
			id: '/_auth/organizations/create';
			path: '/organizations/create';
			fullPath: '/organizations/create';
			preLoaderRoute: typeof AuthOrganizationsCreateLazyImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/organizations/': {
			id: '/_auth/organizations/';
			path: '/organizations';
			fullPath: '/organizations';
			preLoaderRoute: typeof AuthOrganizationsIndexLazyImport;
			parentRoute: typeof AuthImport;
		};
	}
}

// Create and export the route tree

interface AuthRouteChildren {
	AuthUsersCreateRoute: typeof AuthUsersCreateRoute;
	AuthUsersCreateSingleUserRoute: typeof AuthUsersCreateSingleUserRoute;
	AuthAdminsCreateLazyRoute: typeof AuthAdminsCreateLazyRoute;
	AuthOrganizationsCreateLazyRoute: typeof AuthOrganizationsCreateLazyRoute;
	AuthOrganizationsIndexLazyRoute: typeof AuthOrganizationsIndexLazyRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
	AuthUsersCreateRoute: AuthUsersCreateRoute,
	AuthUsersCreateSingleUserRoute: AuthUsersCreateSingleUserRoute,
	AuthAdminsCreateLazyRoute: AuthAdminsCreateLazyRoute,
	AuthOrganizationsCreateLazyRoute: AuthOrganizationsCreateLazyRoute,
	AuthOrganizationsIndexLazyRoute: AuthOrganizationsIndexLazyRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
	'/': typeof IndexRoute;
	'': typeof AuthRouteWithChildren;
	'/users/create': typeof AuthUsersCreateRoute;
	'/users/create-single-user': typeof AuthUsersCreateSingleUserRoute;
	'/admins/create': typeof AuthAdminsCreateLazyRoute;
	'/organizations/create': typeof AuthOrganizationsCreateLazyRoute;
	'/organizations': typeof AuthOrganizationsIndexLazyRoute;
}

export interface FileRoutesByTo {
	'/': typeof IndexRoute;
	'': typeof AuthRouteWithChildren;
	'/users/create': typeof AuthUsersCreateRoute;
	'/users/create-single-user': typeof AuthUsersCreateSingleUserRoute;
	'/admins/create': typeof AuthAdminsCreateLazyRoute;
	'/organizations/create': typeof AuthOrganizationsCreateLazyRoute;
	'/organizations': typeof AuthOrganizationsIndexLazyRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	'/': typeof IndexRoute;
	'/_auth': typeof AuthRouteWithChildren;
	'/_auth/users/create': typeof AuthUsersCreateRoute;
	'/_auth/users/create-single-user': typeof AuthUsersCreateSingleUserRoute;
	'/_auth/admins/create': typeof AuthAdminsCreateLazyRoute;
	'/_auth/organizations/create': typeof AuthOrganizationsCreateLazyRoute;
	'/_auth/organizations/': typeof AuthOrganizationsIndexLazyRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths:
		| '/'
		| ''
		| '/users/create'
		| '/users/create-single-user'
		| '/admins/create'
		| '/organizations/create'
		| '/organizations';
	fileRoutesByTo: FileRoutesByTo;
	to:
		| '/'
		| ''
		| '/users/create'
		| '/users/create-single-user'
		| '/admins/create'
		| '/organizations/create'
		| '/organizations';
	id:
		| '__root__'
		| '/'
		| '/_auth'
		| '/_auth/users/create'
		| '/_auth/users/create-single-user'
		| '/_auth/admins/create'
		| '/_auth/organizations/create'
		| '/_auth/organizations/';
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	AuthRoute: typeof AuthRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	AuthRoute: AuthRouteWithChildren,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/users/create",
        "/_auth/users/create-single-user",
        "/_auth/admins/create",
        "/_auth/organizations/create",
        "/_auth/organizations/"
      ]
    },
    "/_auth/users/create": {
      "filePath": "_auth/users/create.ts",
      "parent": "/_auth"
    },
    "/_auth/users/create-single-user": {
      "filePath": "_auth/users/create-single-user.ts",
      "parent": "/_auth"
    },
    "/_auth/admins/create": {
      "filePath": "_auth/admins/create.lazy.ts",
      "parent": "/_auth"
    },
    "/_auth/organizations/create": {
      "filePath": "_auth/organizations/create.lazy.ts",
      "parent": "/_auth"
    },
    "/_auth/organizations/": {
      "filePath": "_auth/organizations/index.lazy.ts",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
